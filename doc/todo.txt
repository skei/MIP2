
...


//----------------------------------------------------------------------
//
// GENERAL
//
//----------------------------------------------------------------------

* windows version

  mingw.64 ?
  base: thread, timer, attributes,
  debug: print_socket, crash_handler, call_stack
  gui: window, painter, surface classes, opengl..
  plugin: dll-entry

* doubles

  doubles for anything related to audio or parameter values

//----------------------------------------------------------------------
//
// BASE
//
//----------------------------------------------------------------------

* MIP_Registry

  make it more generic?
  MIP_Object, MIP_RefCount, ..
  garbage collection?

//----------------------------------------------------------------------
//
// PLUGIN
//
//----------------------------------------------------------------------

* parameter smoothing

  MIP_Parameter:
  (MIP_ParameterManager?)

    setValue()
    getValue()
    getSmoothValue() ?
    setSmoothingFactor()

* vst2/3 adapters

  clap-as-vst2 (in progress)
  clap-as-vst3 (in progress)

  hosting:

  ladspa-as-clap (works, more or less)
  vst2-as-clap
  vst3-as-clap

//----------------------------------------------------------------------
//
// GUI
//
//----------------------------------------------------------------------

* rename: OpenGL -> glx

* reduce resizing frequency

  - we have to tear down, and rebuild the opengl context when we resize the
    window, and mouse events can generate a lot of them, so the repainting
    can lag..
    we can start a (countdown) timer, and only draw the last one received
    or something similar..
    also, check if we can use only the latest resize event in the
    event queue..

* backbuffer

  same thing if we have a pixmap (or whatever else) backbuffer,
  we have to recreate it..
  we can optimize this a little by having a potentially larger buffer
  than screen/editor.. we calculating next power of two sizes,
  and only resize the buffer (and gl context, etc) if it changes..
  and blit only the used part..

* clipping

  nvgScissor
  nvgIntersectScissor
  nvgResetScissor

  in progress: push/pop clipping rectangles

* find hovering widget doesn't take innerBoder into account
  (you can hover/click over a part of a knob that is hidden behind a
  (blank) innerBorder area)

* double clicking

  current implementation is pretty limited
  start timer when clicking
  new click before timeout = double click
  if timeout = normal single click

* MIP_Skin, MIP_Theme, MIP_Styling

  a set of basic drawing functions you combine and use to drawing widgets?
  on_widget_paint..
  rounded rect, gradient, header, border, ..
  settings?

* window resizing

  restrict number of resize events,
  they can choke the event queue
  resize event:
  - save wanted size
  - if there is a timer running: nothing
  - else: start timer w/timeout (100ms?)
  - when timeout: stop timer, send resize event (latest wanted size)

//------------------------------
// widgets
//------------------------------

* combine Slider, DualRange, ScrollBar

* MIP_TreeWidget
    - branch, leaf
    - folder, file
    - text-based group-box

* grid

  combine cells, each cell can have firstCellInCombo, numCellsInCombo
  for both x and y..
  useful when grid is used for widget layout, etc..

//----------------------------------------------------------------------
//
// AUDIO
//
//----------------------------------------------------------------------

* filter frequency response
* voice manager
* modulation_manager? (mod matrix)

* generalize building blocks
  filters, dsp, fft, ..

//----------------------------------------------------------------------
//
// GFX
//
//----------------------------------------------------------------------



