
...

* the toolbox itself needs a thorough comb-through
  fixing all the small missing bits and pieces,
  at least the low hanging fruits..

* asserts, test return values, error checking, safety, ..

* proper logging system
  LOG(FAILURE,"Couldn't load OpenGl")

* tests
  (explore.. see how other testing libs/suites do this)..

//----------------------------------------------------------------------
//
// GENERAL
//
//----------------------------------------------------------------------

* debug

  cleanup debugging code..

* windows version

  todo: thread, timer, attributes
  debug: print_socket, crash_handler, call_stack
  gui: window, painter, surface classes, opengl
  plugin: dll-entry

* doubles

  doubles for anything related to audio or parameter values
  (check old copy/pasted code)

* MIP_Print

  logfile
  debug output window (with watches)
  MIP_Write() or MIP_APrint, always write, also in release builds

//----------------------------------------------------------------------
//
// BASE
//
//----------------------------------------------------------------------

* MIP_Registry

  make it more generic?
  MIP_Object
  MIP_RefCount
  garbage collection?
  MIP_GLOBAL.. to also contain the MIP_Debug class?
  initialize function, if !initialized
  (postpone, see if we can contol global construction)

//----------------------------------------------------------------------
//
// PLUGIN
//
//----------------------------------------------------------------------

* parameter smoothing

  MIP_Parameter
    setValue()
    getValue()
    getSmoothValue() ?
    setSmoothingFactor()

* vst2/3 adapters

  clap-as-vst2 (in progress)
  clap-as-vst3 (in progress)

* hosting

  ladspa-as-clap (works, more or less, but maybe rewrite using clap_factory)
  vst2-as-clap
  vst3-as-clap

//----------------------------------------------------------------------
//
// GUI
//
//----------------------------------------------------------------------

* reduce resizing frequency

  - we have to tear down, and rebuild the opengl context when we resize the
    window, and mouse events can generate a lot of them, so the repainting
    can lag..
    we can start a (countdown) timer, and only draw the last one received
    or something similar..
    also, check if we can use only the latest resize event in the
    event queue..

  restrict number of resize events,
  they can choke the event queue
  resize event:
  - save wanted size
  - if there is a timer running: nothing
  - else: start timer w/timeout (100ms?)
  - when timeout: stop timer, send resize event (latest wanted size)

* backbuffer

  same thing if we have a pixmap (or whatever else) backbuffer,
  we have to recreate it..
  we can optimize this a little by having a potentially larger buffer
  than screen/editor.. we calculating next power of two sizes,
  and only resize the buffer (and gl context, etc) if it changes..
  and blit only the used part..

* clipping

  investigate how drivers handle opengl scissor rectangle
  when calling swapBuffer()

* double clicking

  first initial test-implementation was pretty limited
  start timer when clicking
  new click before timeout = double click
  if timeout = normal single click

* MIP_Skin, MIP_Theme, MIP_Styling

  a set of basic drawing functions you combine and use to drawing widgets?
  on_widget_paint.. rounded rect, gradient, header, border, .. settings?

* software renderer/painter
  as an alternative to cairo


//------------------------------
// widgets
//------------------------------

* combine Slider, DualRange, ScrollBar

* MIP_TreeWidget
    - branch, leaf
    - folder, file, indent
    - text-based group-box

* MIP_Grid

  combine cells, each cell can have firstCellInCombo, numCellsInCombo
  for both x and y.. useful when grid is used for widget layout, etc..

* widget.highlight : click on a text line in a textbox to highlight it

* redraw widgets when state changes..
* widget.selected, widget.focused
* movable widgets
* resizable widgets

//----------------------------------------------------------------------
//
// GFX
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//
// AUDIO
//
//----------------------------------------------------------------------

* filter frequency response
* voice manager
* modulation_manager (mod matrix)
* oversampling
* ticks
  64 bytes, cachelines, 16 floats, 4 simd
  optimizations
  building blocks of these..
* generalize building blocks
  filters, dsp, fft, ..

